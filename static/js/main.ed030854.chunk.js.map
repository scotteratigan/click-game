{"version":3,"sources":["components/Header.js","components/Tile.js","components/GameArea.js","components/GameLost.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","Jumbotron","fluid","className","Container","score","highScore","Tile","clickTile","_props$tile","tile","id","name","photo","Col","xs","sm","lg","onClick","class","src","alt","shuffleArray","array","newArray","Object","toConsumableArray","i","length","j","Math","floor","random","_ref","GameArea","gameTiles","shuffledGameTiles","tileJSX","forEach","console","log","push","components_Tile","key","Row","GameLost","Button","btn-primary","playAgain","Footer","href","target","rel","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clickedTileId","tiles","state","index","alreadyGuessed","setState","gameInProgress","assertThisInitialized","alert","resetGame","GameTiles","prevState","slice","components_Header","components_GameArea","components_GameLost","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed030854.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Container, Jumbotron } from 'react-bootstrap';\r\n// import Score from './Score';\r\n\r\nfunction Header(props) {\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<Jumbotron fluid className='mb-1 py-4'>\r\n\t\t\t\t<Container className='text-center'>\r\n\t\t\t\t\t<h1>Clicky Game</h1>\r\n\t\t\t\t\t<p>Click on the squares to play.</p>\r\n\t\t\t\t\t<p>Score: {props.score}</p>\r\n\t\t\t\t\t<p>High Score: {props.highScore}</p>\r\n\t\t\t\t</Container>\r\n\t\t\t</Jumbotron>\r\n\t\t</header>\r\n\t);\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Col, Container } from 'react-bootstrap';\r\n\r\nfunction Tile(props) {\r\n\tconst { clickTile } = props;\r\n\tconst { id, name, photo } = props.tile;\r\n\treturn (\r\n\t\t<Col xs={6} sm={4} lg={3} className='my-3' onClick={() => clickTile(id)}>\r\n\t\t\t<Container class='playerContainer'>\r\n\t\t\t\t<img id={id} className='image-fluid playerImage' src={photo} alt={name} />\r\n\t\t\t\t<h4 className='playerCaption'>{name}</h4>\r\n\t\t\t</Container>\r\n\t\t</Col >\r\n\t);\r\n}\r\n\r\nexport default Tile;","import React from 'react';\r\nimport { Container, Row } from 'react-bootstrap';\r\nimport Tile from './Tile';\r\n\r\nconst shuffleArray = (array) => {\r\n\tconst newArray = [...array];\r\n\tfor (let i = newArray.length - 1; i > 0; i--) {\r\n\t\tconst j = Math.floor(Math.random() * (i + 1));\r\n\t\tif (i !== j) {\r\n\t\t\t[newArray[i], newArray[j]] = [newArray[j], newArray[i]];\r\n\t\t}\r\n\t}\r\n\treturn newArray;\r\n}\r\n\r\nfunction GameArea(props) {\r\n\tconst gameTiles = props.gameTiles;\r\n\tconst shuffledGameTiles = shuffleArray(gameTiles);\r\n\tlet tileJSX = [];\r\n\tshuffledGameTiles.forEach(tile => {\r\n\t\tconsole.log('tile is:', tile);\r\n\t\ttileJSX.push(<Tile key={tile.id} tile={tile} clickTile={props.clickTile}></Tile>);\r\n\t});\r\n\treturn (\r\n\t\t<main>\r\n\t\t\t<Container className='text-center'>\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t{tileJSX}\r\n\t\t\t\t</Row>\r\n\t\t\t</Container>\r\n\t\t</main>\r\n\t);\r\n}\r\n\r\nexport default GameArea;","import React from 'react';\r\nimport { Button, Container } from 'react-bootstrap';\r\n\r\n// todo: add win condition based on score here.\r\n\r\nfunction GameLost(props) {\r\n\treturn (\r\n\t\t<main>\r\n\t\t\t<Container className='text-center'>\r\n\t\t\t\t<h1>GAME OVER MAN :/</h1>\r\n\t\t\t\t<h2>Your score was {props.score}</h2>\r\n\t\t\t\t<Button btn-primary=\"true\" className=\"m-3\" onClick={() => props.playAgain()}>Play Again</Button>\r\n\t\t\t</Container>\r\n\t\t</main>\r\n\t);\r\n}\r\n\r\nexport default GameLost;","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nfunction Footer() {\r\n\treturn (\r\n\t\t<footer className=\"App-header\">\r\n\t\t\t<div className=\"container-fluid pt-5 pb-2 text-center\">\r\n\t\t\t\t<a href=\"https://github.com/scotteratigan/click-game\" alt=\"GitHub Repo\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"px-3\">\r\n\t\t\t\t\tSource Code\r\n\t\t\t\t</a>\r\n\t\t\t\t|\r\n\t\t\t\t<a href=\"https://www.linkedin.com/in/scotteratigan/\" alt=\"GitHub Repo\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"px-3\">\r\n\t\t\t\t\tLinkedIn Profile\r\n\t\t\t\t</a>\r\n\t\t\t</div>\r\n\t\t</footer>\r\n\t);\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\n// import './App.css';\nimport Header from './components/Header';\nimport GameArea from './components/GameArea';\nimport GameLost from './components/GameLost';\nimport Footer from './components/Footer';\nimport GameTiles from './gameTiles.json';\n\nclass App extends Component {\n  constructor() {\n    super();\n    // In this initial construction, we want to set highScore to zero.\n    // This is the only place we reset the high score.\n    const tiles = GameTiles.slice(0); // trying to create a copy, yet any change here is reflecting to GameTiles as well.\n    this.state = { tiles, gameInProgress: true, score: 0, highScore: 0 };\n  }\n  clickTile = clickedTileId => {\n    const tiles = [...this.state.tiles];\n    tiles.forEach((tile, index) => {\n      if (tile.id === clickedTileId && tile.alreadyGuessed) {\n        this.setState({ gameInProgress: false }); // game over\n        return\n      }\n      if (tile.id === clickedTileId) {\n        tiles[index].alreadyGuessed = true;\n      }\n      const score = this.state.score + 1\n      const highScore = score > this.state.highScore ? score : this.state.highScore;\n      this.setState({ tiles, score, highScore });\n    }, this);\n    if (this.state.score === 3) { // tiles.length\n      alert('You win!');\n      return;\n    }\n  }\n  resetGame = () => {\n    const tiles = [...GameTiles];\n    tiles.forEach(tile => {\n      // currently resetting manually, not sure why the array isn't resetting to the JSON file though.\n      tile.alreadyGuessed = false;\n    });\n    this.setState((prevState) => {\n      return { tiles, gameInProgress: true, score: 0, highScore: prevState.highScore }\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Header gameInProgress={this.state.gameInProgress} score={this.state.score} highScore={this.state.highScore} />\n        {this.state.gameInProgress ? <GameArea gameTiles={this.state.tiles} clickTile={this.clickTile} /> : <GameLost score={this.state.score} playAgain={this.resetGame} />}\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}