{"version":3,"sources":["components/Header/Header.js","components/Tile/Tile.js","components/GameArea/GameArea.js","components/GameLost/GameLost.js","components/GameWon/GameWon.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","Jumbotron","fluid","className","Container","score","highScore","Tile","handleTileClick","_props$tile","tile","id","name","photo","Col","xs","sm","lg","onClick","src","alt","renderTiles","array","newArray","Object","toConsumableArray","i","length","j","Math","floor","random","_ref","shuffleArray","gameTiles","map","components_Tile_Tile","key","clickTile","GameArea","Row","GameLost","Button","btn-primary","playAgain","GameWon","Footer","href","target","rel","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clickedTileId","tiles","state","forEach","index","alreadyGuessed","setState","gameState","newScore","assertThisInitialized","resetGame","GameTiles","prevState","Header_Header","GameArea_GameArea","components_GameWon_GameWon","GameLost_GameLost","Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.735b1c8b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Container, Jumbotron } from 'react-bootstrap';\r\n// import Score from './Score';\r\n\r\nfunction Header(props) {\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<Jumbotron fluid className='mb-1 py-4'>\r\n\t\t\t\t<Container className='text-center'>\r\n\t\t\t\t\t<h1>Clicky Game</h1>\r\n\t\t\t\t\t<p>Click on a player to start... but don't click the same player twice!</p>\r\n\t\t\t\t\t<p>Score: {props.score}</p>\r\n\t\t\t\t\t<p>High Score: {props.highScore}</p>\r\n\t\t\t\t</Container>\r\n\t\t\t</Jumbotron>\r\n\t\t</header>\r\n\t);\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Col, Container } from 'react-bootstrap';\r\nimport './Tile.css';\r\n\r\nfunction Tile(props) {\r\n\tconst { handleTileClick } = props;\r\n\tconst { id, name, photo } = props.tile;\r\n\treturn (\r\n\t\t<Col xs={6} sm={4} lg={3} className='my-3' onClick={() => handleTileClick(id)}>\r\n\t\t\t<Container className='playerContainer'>\r\n\t\t\t\t<img id={id} className='image-fluid playerImage' src={photo} alt={name} />\r\n\t\t\t\t<h4 className='playerCaption'>{name}</h4>\r\n\t\t\t</Container>\r\n\t\t</Col >\r\n\t);\r\n}\r\n\r\nexport default Tile;","import React from 'react';\r\nimport { Container, Row } from 'react-bootstrap';\r\nimport Tile from '../Tile/';\r\n\r\nconst shuffleArray = array => {\r\n\t// Randomly shuffle the game tiles, using Fisher-Yates algorithm\r\n\tconst newArray = [...array];\r\n\tfor (let i = newArray.length - 1; i > 0; i -= 1) {\r\n\t\tconst j = Math.floor(Math.random() * (i + 1));\r\n\t\t// swap as long as indicies aren't identical:\r\n\t\tif (i !== j) [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\r\n\t} // Returns a new shuffled array:\r\n\treturn newArray;\r\n}\r\n\r\nconst renderTiles = props => {\r\n\t// Creating a new array of tiles to avoid mutation:\r\n\tconst shuffledGameTiles = shuffleArray(props.gameTiles);\r\n\tconst tileJSX = shuffledGameTiles.map(tile =>\r\n\t\t(<Tile key={tile.id} tile={tile} clickTile={props.clickTile}></Tile>)\r\n\t);\r\n\treturn tileJSX;\r\n}\r\n\r\nfunction GameArea(props) {\r\n\treturn (\r\n\t\t<main>\r\n\t\t\t<Container className='text-center'>\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t{renderTiles(props)}\r\n\t\t\t\t</Row>\r\n\t\t\t</Container>\r\n\t\t</main>\r\n\t);\r\n}\r\n\r\nexport default GameArea;","import React from 'react';\r\nimport { Button, Container } from 'react-bootstrap';\r\n\r\n// todo: add win condition based on score here.\r\n\r\nfunction GameLost(props) {\r\n\treturn (\r\n\t\t<main>\r\n\t\t\t<Container className='text-center'>\r\n\t\t\t\t<h1>GAME OVER MAN :/</h1>\r\n\t\t\t\t<h2>Your score was {props.score}</h2>\r\n\t\t\t\t<Button btn-primary=\"true\" className=\"m-3\" onClick={() => props.playAgain()}>Play Again</Button>\r\n\t\t\t</Container>\r\n\t\t</main>\r\n\t);\r\n}\r\n\r\nexport default GameLost;","import React from 'react';\r\nimport { Button, Container } from 'react-bootstrap';\r\n\r\nconst GameWon = props => {\r\n\treturn (\r\n\t\t<main>\r\n\t\t\t<Container className='text-center'>\r\n\t\t\t\t<h1>You won!</h1>\r\n\t\t\t\t<Button btn-primary=\"true\" className=\"m-3\" onClick={() => props.playAgain()}>Play Again</Button>\r\n\t\t\t</Container>\r\n\t\t</main>\r\n\t);\r\n};\r\n\r\nexport default GameWon;","import React from 'react';\r\n\r\nfunction Footer() {\r\n\treturn (\r\n\t\t<footer className=\"App-header\">\r\n\t\t\t<div className=\"container-fluid pt-5 pb-2 text-center\">\r\n\t\t\t\t<a href=\"https://github.com/scotteratigan/click-game\" alt=\"GitHub Repo\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"px-3\">\r\n\t\t\t\t\tSource Code\r\n\t\t\t\t</a>\r\n\t\t\t\t|\r\n\t\t\t\t<a href=\"https://www.linkedin.com/in/scotteratigan/\" alt=\"GitHub Repo\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"px-3\">\r\n\t\t\t\t\tLinkedIn Profile\r\n\t\t\t\t</a>\r\n\t\t\t</div>\r\n\t\t</footer>\r\n\t);\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport Header from './components/Header/';\nimport GameArea from './components/GameArea/';\nimport GameLost from './components/GameLost/';\nimport GameWon from './components/GameWon/';\nimport Footer from './components/Footer/';\nimport GameTiles from './gameTiles.json';\n\nclass App extends Component {\n  constructor() {\n    // todo: change this to a more simple initialization:\n    super();\n    this.state = { tiles: GameTiles, gameState: 'playing', score: 0, highScore: 0 };\n  }\n\n  handleTileClick = clickedTileId => {\n    const tiles = [...this.state.tiles];\n    // Iterate over array to determine which tile was clicked:\n    tiles.forEach((tile, index) => {\n      if (tile.id === clickedTileId && tile.alreadyGuessed) {\n        // If this tile was previously clicked, player has lost:\n        this.setState({ gameState: 'lost' });\n      }\n      else if (tile.id === clickedTileId) {\n        // only running full logic once we find the clicked tile\n        // otherwise events would fire 12 times\n        tiles[index].alreadyGuessed = true;\n        const newScore = this.state.score + 1\n        const highScore = newScore > this.state.highScore ? newScore : this.state.highScore;\n        this.setState({ tiles, score: newScore, highScore });\n        if (this.state.score === tiles.length) {\n          this.setState({ gameState: 'won' })\n        }\n      }\n    }, this);\n  }\n\n  resetGame = () => {\n    const tiles = [...GameTiles];\n    tiles.forEach(tile => tile.alreadyGuessed = false);\n    this.setState(prevState => ({ tiles, gameState: 'playing', score: 0, highScore: prevState.highScore }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header gameState={this.state.gameState} score={this.state.score} highScore={this.state.highScore} />\n        {/* Conditionally render the game area based on the game state: */}\n        {this.state.gameState === 'playing' && <GameArea gameTiles={this.state.tiles} handleTileClick={this.handleTileClick} />}\n        {this.state.gameState === 'won' && <GameWon playAgain={this.resetGame} />}\n        {this.state.gameState === 'lost' && <GameLost score={this.state.score} playAgain={this.resetGame} />}\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}