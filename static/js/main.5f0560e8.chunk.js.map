{"version":3,"sources":["components/Header/Header.js","components/Tile/Tile.js","components/GameArea/GameArea.js","components/Quote/Quote.js","components/PlayButton/PlayButton.js","components/GameLost/GameLost.js","components/GameWon/GameWon.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","score","highScore","react_default","a","createElement","Jumbotron","fluid","className","Container","id","src","alt","Fragment","Tile","handleTileClick","_props$tile","tile","name","photo","Col","xs","sm","lg","onClick","renderTiles","array","newArray","Object","toConsumableArray","i","length","j","Math","floor","random","_ref","shuffleArray","gameTiles","map","components_Tile_Tile","key","GameArea","Row","Quote","_props$lastTileClicke","lastTileClicked","quote","PlayButton","playAgain","GameLost","Quote_Quote","components_PlayButton_PlayButton","GameWon","Footer","href","target","rel","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clickedTileId","tiles","state","forEach","index","alreadyGuessed","setState","gameState","newScore","assertThisInitialized","resetGame","warriorsPlayerData","prevState","_this$state","components_Header_Header","GameArea_GameArea","components_GameWon_GameWon","GameLost_GameLost","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f0560e8.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Container, Jumbotron } from 'react-bootstrap';\r\nimport './Header.css';\r\n\r\nfunction Header(props) {\r\n\tconst { score, highScore } = props;\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<Jumbotron fluid className='mb-1 py-4 text-light'>\r\n\t\t\t\t<Container className='text-center'>\r\n\t\t\t\t\t<h1>WARRIORS <img id='basketball' className='mx-3' src='images/basketball.png' alt='Basketball autographed by Stephen Curry' />Memory Game</h1>\r\n\t\t\t\t\t<p>Click on a player to start to pass him the ball.<br />\r\n\t\t\t\t\t\tTest your memory: try to pass to each player only once to win.</p>\r\n\t\t\t\t\t<p> {score ? <> Score: {score} | </> : null}\r\n\t\t\t\t\t\tHigh Score: {highScore}{highScore === 12 ? <> (perfect game)</> : null}</p>\r\n\t\t\t\t</Container>\r\n\t\t\t</Jumbotron>\r\n\t\t</header >\r\n\t);\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Col, Container } from 'react-bootstrap';\r\nimport './Tile.css';\r\n\r\nfunction Tile(props) {\r\n\tconst { handleTileClick } = props;\r\n\tconst { id, name, photo } = props.tile;\r\n\treturn (\r\n\t\t<Col xs={6} sm={4} lg={3} className='my-3' onClick={() => handleTileClick(id)}>\r\n\t\t\t<Container className='playerContainer'>\r\n\t\t\t\t<h6 className='playerNumber'>{id}</h6>\r\n\t\t\t\t<img id={id} className='image-fluid playerImage' src={photo} alt={name} />\r\n\t\t\t\t<h4 className='playerCaption'>{name}</h4>\r\n\t\t\t</Container>\r\n\t\t</Col >\r\n\t);\r\n}\r\n\r\nexport default Tile;","import React from 'react';\r\nimport { Container, Row } from 'react-bootstrap';\r\nimport Tile from '../Tile/';\r\n\r\nconst shuffleArray = array => {\r\n\t// Randomly shuffle the game tiles, using Fisher-Yates algorithm\r\n\tconst newArray = [...array];\r\n\tfor (let i = newArray.length - 1; i > 0; i -= 1) {\r\n\t\tconst j = Math.floor(Math.random() * (i + 1));\r\n\t\t// swap as long as indicies aren't identical:\r\n\t\tif (i !== j) [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\r\n\t} // Returns a new shuffled array:\r\n\treturn newArray;\r\n}\r\n\r\nconst renderTiles = props => {\r\n\t// Creating a new array of tiles to avoid mutation:\r\n\tconst shuffledGameTiles = shuffleArray(props.gameTiles);\r\n\tconst tileJSX = shuffledGameTiles.map(tile =>\r\n\t\t(<Tile key={tile.id} tile={tile} handleTileClick={props.handleTileClick}></Tile>)\r\n\t);\r\n\treturn tileJSX;\r\n}\r\n\r\nfunction GameArea(props) {\r\n\treturn (\r\n\t\t<main>\r\n\t\t\t<Container className='text-center'>\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t{renderTiles(props)}\r\n\t\t\t\t</Row>\r\n\t\t\t</Container>\r\n\t\t</main>\r\n\t);\r\n}\r\n\r\nexport default GameArea;","import React from 'react';\r\n// import { Blockquote } from 'react-bootstrap';\r\n\r\nfunction Quote(props) {\r\n\tconst { quote, name } = props.lastTileClicked;\r\n\treturn (\r\n\t\t<blockquote className='blockquote text-left'>\r\n\t\t\t<p className='mb-0'>\r\n\t\t\t\t<em>{quote}</em>\r\n\t\t\t</p>\r\n\t\t\t<footer className='blockquote-footer mb-3'>{name}</footer>\r\n\t\t</blockquote>\r\n\t);\r\n}\r\n\r\nexport default Quote;","import React from 'react';\r\nimport './PlayButton.css';\r\n\r\nconst PlayButton = props => {\r\n\treturn (\r\n\t\t<button className='btn m-3' id='playButton' onClick={() => props.playAgain()}>Play Again</button>\r\n\t);\r\n};\r\n\r\nexport default PlayButton;","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport Quote from './../Quote/';\r\nimport PlayButton from './../PlayButton/';\r\n\r\nfunction GameLost(props) {\r\n\tconst { score, highScore, lastTileClicked, playAgain } = props;\r\n\treturn (\r\n\t\t<main>\r\n\t\t\t<Container className='text-center'>\r\n\t\t\t\t<h1>Game over - no championship ring this time.</h1>\r\n\t\t\t\t<h2>Your score was {score}\r\n\t\t\t\t\t{score === highScore ? <>, a high score!</> : null}\r\n\t\t\t\t</h2>\r\n\t\t\t\t<Quote lastTileClicked={lastTileClicked}></Quote>\r\n\t\t\t\t<PlayButton playAgain={playAgain} />\r\n\t\t\t</Container>\r\n\t\t</main>\r\n\t);\r\n}\r\n\r\nexport default GameLost;","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport PlayButton from './../PlayButton/';\r\n\r\nconst GameWon = props => {\r\n\tconst { playAgain } = props;\r\n\treturn (\r\n\t\t<main>\r\n\t\t\t<Container className='text-center'>\r\n\t\t\t\t<h1>Perfect game!</h1>\r\n\t\t\t\t<PlayButton playAgain={playAgain} />\r\n\t\t\t</Container>\r\n\t\t</main>\r\n\t);\r\n};\r\n\r\nexport default GameWon;","import React from 'react';\r\nimport './Footer.css';\r\n\r\nfunction Footer() {\r\n\treturn (\r\n\t\t<footer id='footer'>\r\n\t\t\t<div className='container-fluid pt-3 pb-2 text-center'>\r\n\t\t\t\t<p className='my-0'>A react application by Scott Ratigan</p>\r\n\t\t\t\t<a href='https://github.com/scotteratigan/click-game' target='_blank' rel='noopener noreferrer' className='px-3 text-white'>\r\n\t\t\t\t\tSource Code\r\n\t\t\t\t</a>\r\n\t\t\t\t|\r\n\t\t\t\t<a href='https://www.linkedin.com/in/scotteratigan/' target='_blank' rel='noopener noreferrer' className='px-3 text-white'>\r\n\t\t\t\t\tLinkedIn Profile\r\n\t\t\t\t</a>\r\n\t\t\t\t|\r\n\t\t\t\t<a href='https://github.com/scotteratigan/portfolio.html' className='px-3 text-white'>\r\n\t\t\t\t\tMy Other Projects\r\n\t\t\t\t</a>\r\n\t\t\t</div>\r\n\t\t</footer>\r\n\t);\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport Header from './components/Header/';\nimport GameArea from './components/GameArea/';\nimport GameLost from './components/GameLost/';\nimport GameWon from './components/GameWon/';\nimport Footer from './components/Footer/';\nimport warriorsPlayerData from './gameTiles.json';\n\nclass App extends Component {\n  constructor() {\n    // todo: change this to a more simple initialization:\n    super();\n    this.state = { tiles: warriorsPlayerData, gameState: 'playing', score: 0, highScore: 0 };\n  }\n\n  handleTileClick = clickedTileId => {\n    const tiles = [...this.state.tiles];\n    // Iterate over array to determine which tile was clicked:\n    tiles.forEach((tile, index) => {\n      if (tile.id === clickedTileId && tile.alreadyGuessed) {\n        // If this tile was previously clicked, player has lost:\n        this.setState({ gameState: 'lost' });\n      }\n      else if (tile.id === clickedTileId) {\n        // only running full logic once we find the clicked tile\n        // otherwise events would fire 12 times\n        tiles[index].alreadyGuessed = true;\n        const newScore = this.state.score + 1\n        const highScore = newScore > this.state.highScore ? newScore : this.state.highScore;\n        this.setState({ tiles, score: newScore, highScore, lastTileClicked: tile });\n        if (newScore === tiles.length) {\n          this.setState({ gameState: 'won' })\n        }\n      }\n    }, this);\n  }\n\n  resetGame = () => {\n    const tiles = [...warriorsPlayerData];\n    tiles.forEach(tile => tile.alreadyGuessed = false);\n    this.setState(prevState => ({ tiles, gameState: 'playing', score: 0, highScore: prevState.highScore }));\n  }\n\n  render() {\n    const { gameState, score, highScore, tiles, lastTileClicked } = this.state;\n    return (\n      <div className='App'>\n        <Header gameState={gameState} score={score} highScore={highScore} />\n        {/* Conditionally render the game area based on the game state: */}\n        {gameState === 'playing' && <GameArea gameTiles={tiles} handleTileClick={this.handleTileClick} />}\n        {gameState === 'won' && <GameWon playAgain={this.resetGame} />}\n        {gameState === 'lost' && <GameLost score={score} highScore={highScore} playAgain={this.resetGame} lastTileClicked={lastTileClicked} />}\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}